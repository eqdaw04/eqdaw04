/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;

import Controladora.Main;
import javax.swing.JOptionPane;
import Excepciones.Excepcion;
import UML.Jugador;
import java.awt.Image;
import java.util.ArrayList;
import javax.swing.Icon;
import javax.swing.ImageIcon;

/**
 * Vista jugadores.
 * Fecha de la creación de la vista: 23/04/2018
 * @author eqdaw04
 */

public class VJugador extends javax.swing.JDialog {
    
    private ArrayList<Jugador> listaJugadores;
    private String tipo;
    private int posicion, n;
    private Jugador j;
    
    /**
     * Metodo para mostrar las opciones según el CRUD que se quiera realizar.
     * @param tipo String
     * @param n int
     */
    
    public VJugador(String tipo, int n) {
        initComponents();
        cargarDatos(tipo, n);      
        
        ImageIcon fondo = new ImageIcon("../../../imagenes/fondo2.jpg");
        Icon icono = new ImageIcon (fondo.getImage().getScaledInstance(imgfondo.getWidth(), imgfondo.getHeight(), Image.SCALE_DEFAULT));
        imgfondo.setIcon(icono);
        this.repaint();
    }
    
    public VJugador(String tipo, int n, Jugador j) {
        initComponents();
        this.j=j;
        cargarDatos(tipo, n);        
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfDNI = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfNombre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tfApellido1 = new javax.swing.JTextField();
        tfApellido2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfNickname = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taComentario = new javax.swing.JTextArea();
        bAceptar = new javax.swing.JButton();
        bCancelar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        bPrimero = new javax.swing.JButton();
        bAnterior = new javax.swing.JButton();
        bSiguiente = new javax.swing.JButton();
        bUltimo = new javax.swing.JButton();
        ftfSueldo = new javax.swing.JFormattedTextField();
        bBuscar = new javax.swing.JButton();
        cFechaAlta = new org.freixas.jcalendar.JCalendarCombo();
        jLabel9 = new javax.swing.JLabel();
        imgfondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(2147483647, 2147483647));
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Bauhaus 93", 0, 36)); // NOI18N
        jLabel1.setText("JUGADOR");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(280, 40, 150, 54);

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        jLabel2.setText("DNI:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(118, 142, 40, 21);
        getContentPane().add(tfDNI);
        tfDNI.setBounds(253, 143, 214, 22);

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        jLabel3.setText("Nombre:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(118, 174, 76, 21);

        tfNombre.setEditable(false);
        getContentPane().add(tfNombre);
        tfNombre.setBounds(253, 175, 214, 22);

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        jLabel4.setText("Apellido 1:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(118, 204, 90, 21);

        tfApellido1.setEditable(false);
        getContentPane().add(tfApellido1);
        tfApellido1.setBounds(253, 205, 214, 22);

        tfApellido2.setEditable(false);
        getContentPane().add(tfApellido2);
        tfApellido2.setBounds(253, 235, 214, 22);

        jLabel5.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        jLabel5.setText("Nickname:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(118, 264, 91, 21);

        tfNickname.setEditable(false);
        getContentPane().add(tfNickname);
        tfNickname.setBounds(253, 265, 214, 22);

        jLabel6.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        jLabel6.setText("Comentario:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(118, 354, 108, 21);

        taComentario.setEditable(false);
        taComentario.setColumns(20);
        taComentario.setRows(5);
        jScrollPane1.setViewportView(taComentario);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(253, 354, 214, 96);

        bAceptar.setText("Aceptar");
        bAceptar.setEnabled(false);
        bAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAceptarActionPerformed(evt);
            }
        });
        getContentPane().add(bAceptar);
        bAceptar.setBounds(253, 457, 77, 25);

        bCancelar.setText("Cancelar");
        bCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelarActionPerformed(evt);
            }
        });
        getContentPane().add(bCancelar);
        bCancelar.setBounds(384, 457, 83, 25);

        jLabel7.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        jLabel7.setText("Sueldo:");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(118, 294, 65, 21);

        jLabel8.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        jLabel8.setText("Fecha de alta:");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(118, 324, 123, 21);

        bPrimero.setText("|<");
        bPrimero.setEnabled(false);
        bPrimero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPrimeroActionPerformed(evt);
            }
        });
        getContentPane().add(bPrimero);
        bPrimero.setBounds(253, 489, 47, 25);

        bAnterior.setText("<");
        bAnterior.setEnabled(false);
        bAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAnteriorActionPerformed(evt);
            }
        });
        getContentPane().add(bAnterior);
        bAnterior.setBounds(307, 489, 41, 25);

        bSiguiente.setText(">");
        bSiguiente.setEnabled(false);
        bSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSiguienteActionPerformed(evt);
            }
        });
        getContentPane().add(bSiguiente);
        bSiguiente.setBounds(372, 489, 41, 25);

        bUltimo.setText(">|");
        bUltimo.setEnabled(false);
        bUltimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUltimoActionPerformed(evt);
            }
        });
        getContentPane().add(bUltimo);
        bUltimo.setBounds(420, 489, 47, 25);

        ftfSueldo.setEditable(false);
        ftfSueldo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        getContentPane().add(ftfSueldo);
        ftfSueldo.setBounds(253, 295, 214, 22);

        bBuscar.setText("Buscar");
        bBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(bBuscar);
        bBuscar.setBounds(474, 142, 71, 25);

        cFechaAlta.setEnabled(false);
        getContentPane().add(cFechaAlta);
        cFechaAlta.setBounds(253, 325, 214, 22);

        jLabel9.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        jLabel9.setText("Apellido 2:");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(118, 234, 90, 21);
        getContentPane().add(imgfondo);
        imgfondo.setBounds(0, 0, 680, 500);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAceptarActionPerformed
        // TODO add your handling code here:
       try
       {
           switch(tipo)
           {
               case "alta":
                   // Validación de datos
                    Main.validar(3, tfDNI);
                    Main.validar(4, tfNombre);
                    Main.validar(5, tfApellido1);
                    Main.validar(5, tfApellido2);
                    if(tfNickname.getText().isEmpty())
                    {
                        throw new Excepcion(26);
                    }
                    if(ftfSueldo.getText().equals("Unparseable number: \"\""))
                    {
                        throw new Excepcion(10);
                    }
                    // Comprobar si existe, en caso contrario se procede el alta.
                   if(Main.buscarJugador(tfDNI.getText())!=null)
                   {
                       throw new Excepcion(23);
                   }
                   // Insertar el jugador
                   Main.altaJugador(tfDNI.getText(), tfNombre.getText(), tfApellido1.getText(), tfApellido2.getText(), tfNickname.getText(), ftfSueldo.getText(), cFechaAlta.getDate(), taComentario.getText());
                   JOptionPane.showMessageDialog(this, "El jugador se ha dado de alta correctamente.");
                   break;
               case "baja":
                   // Eliminar el jugador
                   Main.bajaJugador();
                   JOptionPane.showMessageDialog(this, "El jugador se dado de baja correctamente.");
                   break;
               case "modificacion":
                   // Validación de datos
                    Main.validar(3, tfDNI);
                    Main.validar(4, tfNombre);  
                    Main.validar(5, tfApellido1);
                    Main.validar(5, tfApellido2);
                    if(tfNickname.getText().isEmpty())
                    {
                        throw new Excepcion(26);
                    }
                   Main.modificarJugador(tfDNI.getText(), tfNombre.getText(), tfApellido1.getText(), tfApellido2.getText(), tfNickname.getText(), ftfSueldo.getText(), taComentario.getText());
                   JOptionPane.showMessageDialog(this, "El jugador se ha modificado correctamente.");
                   break;
           }
           Main.reabrir(this, tipo, n);
       }
       catch (Excepcion e)
       {
           JOptionPane.showMessageDialog(this, e.getMessage(), "Error", 0);
       }
       catch (Exception e)
       {
           JOptionPane.showMessageDialog(this, e.getClass() + " \n " + e.getMessage(), "Error", 0);
       }
       
    }//GEN-LAST:event_bAceptarActionPerformed

    private void bCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelarActionPerformed
        // TODO add your handling code here:
        Main.cerrar(this);
    }//GEN-LAST:event_bCancelarActionPerformed

    private void bBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarActionPerformed
        // TODO add your handling code here:
        try
        {
            // Si entra como opción listado, no se permite ninguna modificación y se crea un listado para recorrer por el listado
            if(tipo.equals("listado"))
            {
                // Si el DNI está vacío, se crea una lista interna, permitiendo recorrerla con los botones direccionales, en caso contrario, muestra únicamente el jugador con ese DNI
                if(tfDNI.getText().isEmpty())
                {
                    posicion=0;
                    listaJugadores = Main.buscarJugador();
                    if(listaJugadores.size()>1)
                    {
                        bSiguiente.setEnabled(true);
                        bUltimo.setEnabled(true);
                    }
                    else
                    {
                        // Si no hay jugadores en la BD
                        if(listaJugadores.isEmpty())
                        {
                            throw new Excepcion(27);
                        }
                    }
                    seleccionarJugador();
                }
                else
                {
                    Main.validar(3, tfDNI);
                    buscarJugador(tfDNI.getText());
                    bPrimero.setEnabled(false);
                    bAnterior.setEnabled(false);
                    bSiguiente.setEnabled(false);
                    bUltimo.setEnabled(false);
                }
            }
            else
            {
                // Localiza un jugador en exclusiva para su modificación o borrado
                Main.validar(3, tfDNI);
                buscarJugador(tfDNI.getText());
                if(tipo.equals("modificacion"))
                {
                    tfNombre.setEditable(true);
                    tfApellido1.setEditable(true);
                    tfApellido2.setEditable(true);
                    tfNickname.setEditable(true);
                    ftfSueldo.setEditable(true);
                    taComentario.setEditable(true);
                }
                bAceptar.setEnabled(true);
            }
        }
       catch (Excepcion e)
       {
           JOptionPane.showMessageDialog(this, e.getMessage(), "Error", 0);
       }
       catch (Exception e)
       {
           JOptionPane.showMessageDialog(this, e.getClass() + " \n " + e.getMessage(), "Error", 0);
       }
    }//GEN-LAST:event_bBuscarActionPerformed

    private void bPrimeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPrimeroActionPerformed
        // TODO add your handling code here:
        // Cargar el primer jugador de la BD
        try
        {
            posicion=0;
            seleccionarJugador();
            bSiguiente.setEnabled(true);
            bUltimo.setEnabled(true);
            bPrimero.setEnabled(false);
            bAnterior.setEnabled(false);
        }
        catch (Excepcion e)
        {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", 0);
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, e.getClass() + " \n " + e.getMessage(), "Error", 0);
        }
    }//GEN-LAST:event_bPrimeroActionPerformed

    private void bAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAnteriorActionPerformed
        // TODO add your handling code here:
        // Cargar el jugador anterior de la BD
        try
        {
            posicion=posicion-1;
            seleccionarJugador();
            bSiguiente.setEnabled(true);
            bUltimo.setEnabled(true);
            if(posicion==0)
            {
                bPrimero.setEnabled(false);
                bAnterior.setEnabled(false);
            }
        }
        catch (Excepcion e)
        {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", 0);
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, e.getClass() + " \n " + e.getMessage(), "Error", 0);
        }
    }//GEN-LAST:event_bAnteriorActionPerformed

    private void bSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSiguienteActionPerformed
        // TODO add your handling code here:
        // Cargar el siguiente jugador de la BD
        try
        {
            posicion=posicion+1;
            seleccionarJugador();
            bAnterior.setEnabled(true);
            bPrimero.setEnabled(true);
            if(posicion==(listaJugadores.size()-1))
            {
                bSiguiente.setEnabled(false);
                bUltimo.setEnabled(false);
            }
        }
        catch (Excepcion e)
        {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", 0);
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, e.getClass() + " \n " + e.getMessage(), "Error", 0);
        }
    }//GEN-LAST:event_bSiguienteActionPerformed

    private void bUltimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bUltimoActionPerformed
        // TODO add your handling code here:
        // Cargar el últimp jugador de la BD
        try
        {
            posicion=listaJugadores.size()-1;     
            seleccionarJugador();
            bAnterior.setEnabled(true);
            bPrimero.setEnabled(true);
            bSiguiente.setEnabled(false);
            bUltimo.setEnabled(false);
        }
        catch (Excepcion e)
        {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", 0);
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, e.getClass() + " \n " + e.getMessage(), "Error", 0);
        }
    }//GEN-LAST:event_bUltimoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAceptar;
    private javax.swing.JButton bAnterior;
    private javax.swing.JButton bBuscar;
    private javax.swing.JButton bCancelar;
    private javax.swing.JButton bPrimero;
    private javax.swing.JButton bSiguiente;
    private javax.swing.JButton bUltimo;
    private org.freixas.jcalendar.JCalendarCombo cFechaAlta;
    private javax.swing.JFormattedTextField ftfSueldo;
    private javax.swing.JLabel imgfondo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea taComentario;
    private javax.swing.JTextField tfApellido1;
    private javax.swing.JTextField tfApellido2;
    private javax.swing.JTextField tfDNI;
    private javax.swing.JTextField tfNickname;
    private javax.swing.JTextField tfNombre;
    // End of variables declaration//GEN-END:variables

    /**
     * Metodo para la carga de datos de la vista.
     * @param tipo String
     * @param n int
     */
    
    private void cargarDatos(String tipo, int n) {
        this.n=n;
        this.tipo=tipo;
        setModal(true);
        this.setLocationRelativeTo(null);
        listaJugadores = new ArrayList();        
        bPrimero.setVisible(false);
        bAnterior.setVisible(false);
        bSiguiente.setVisible(false);
        bUltimo.setVisible(false);
        switch(tipo)
        {
            case "alta":
                tfNombre.setEditable(true);
                tfApellido1.setEditable(true);
                tfApellido2.setEditable(true);
                tfNickname.setEditable(true);
                ftfSueldo.setEditable(true);
                taComentario.setEditable(true);
                bAceptar.setEnabled(true);
                bBuscar.setVisible(false);
                break;
            case "listado":
                bAceptar.setVisible(false);
                bCancelar.setVisible(true);       
                bPrimero.setVisible(true);
                bAnterior.setVisible(true);
                bSiguiente.setVisible(true);
                bUltimo.setVisible(true);
                break;
            case "consulta":
                tfDNI.setText(j.getDni());
                tfDNI.setEditable(false);
                tfNombre.setText(j.getNombre());
                tfApellido1.setText(j.getApellido1());
                tfApellido2.setText(j.getApellido2()); 
                tfNickname.setText(j.getNickname());
                cFechaAlta.setDate(j.getFechaAlta());
                ftfSueldo.setText(String.valueOf(j.getSueldo())); 
                taComentario.setText(j.getComentario());
                bBuscar.setVisible(false);
                bAceptar.setVisible(false);
                bCancelar.setVisible(true);
                break;
        }
        setVisible(true);
    }
    
    /**
     * Metodo para buscar un jugador por su dni.
     * @param dni String
     * @throws Exception 
     */
    
    private void buscarJugador(String dni) throws Exception {
        j = Main.buscarJugador(dni);
        if(j==null)
        {
            throw new Excepcion(17);
        }
        mostrarDatos(j);
    }
    
    /**
     * Metodo para seleccionar un jugador guardado en la base de datos.
     * @throws Exception 
     */
    
    private void seleccionarJugador() throws Exception {
        j = null;
        if(listaJugadores.size()>1)
        {
            j=listaJugadores.get(posicion);
        }
        else
        {
            j=listaJugadores.get(0);
        }
        mostrarDatos(j);
    }
    
    /**
     * Metodo para mostrar los datos de un jugador encontrado.
     * @param j Jugador
     * @throws Exception 
     */
    
    private void mostrarDatos(Jugador j) throws Exception {
        tfDNI.setText(j.getDni());
        tfNombre.setText(j.getNombre());
        tfApellido1.setText(j.getApellido1());
        tfApellido2.setText(j.getApellido2());
        tfNickname.setText(j.getNickname());
        ftfSueldo.setText(String.valueOf(j.getSueldo()));
        cFechaAlta.setDate(j.getFechaAlta());
        taComentario.setText(j.getComentario());
    }
}
